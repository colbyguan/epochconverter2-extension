{"version":3,"sources":["components/CopyIcon.js","components/CopyableRow.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["CopyIcon","props","xmlns","fill","viewBox","stroke","width","height","className","hovered","strokeLinecap","strokeLinejoin","strokeWidth","d","borderColorFromOffset","offset","timeTextFromNowAndOffset","now","CopyableTime","alignLeft","onClick","console","log","ts","copy","handleCopySuccess","borderColor","CopyableRow","startBorderColor","startOffset","endBorderColor","endOffset","disableBorder","useState","setHovered","startTime","endTime","onMouseEnter","e","onMouseLeave","toCopy","handleCopyFail","_MULTIPLIERS","timeStringToOffset","s","length","unit","charAt","num","substring","QUICK_TIMESTAMPS","App","start","setStart","end","setEnd","setStartOffset","setEndOffset","lastFocusedWasStart","setLastFocusedWasStart","ringInput","setRingInput","flashQuickFillLabel","setFlashQuickFillLabel","flashTimeouts","setFlashTimeouts","toast","setToast","toastColor","setToastColor","toastFade","setToastFade","toastMove","setToastMove","timeouts","setTimeouts","Math","round","Date","nowDate","setUTCSeconds","setTimeout","forEach","t","clearTimeout","push","changeQuickFillLabel","wasStart","toLocaleString","toUTCString","map","rowIdx","timestamp","htmlFor","type","name","id","clsx","onChange","target","value","onFocus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc5d57e8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CopyIcon = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke=\"currentColor\"\n      width=\"20px\"\n      height=\"20px\"\n      className={\"transform transition mt-0.5 text-gray-600 group-hover:text-black group-hover:scale-125 \" + (props.hovered ? \"text-black scale-125\" : \"\")}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth={2}\n        d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n      />\n    </svg>\n  );\n};\n\nexport default CopyIcon;\n","import React, { useState } from \"react\";\nimport CopyIcon from \"./CopyIcon\";\nimport copy from 'copy-to-clipboard';\n\nconst CopyableRow = (props) => {\n  let startBorderColor = borderColorFromOffset(props.startOffset);\n  let endBorderColor = borderColorFromOffset(props.endOffset);\n  if (props.disableBorder === true) {\n    startBorderColor = \"border-white\";\n    endBorderColor = \"border-white\";\n  }\n  const [hovered, setHovered] = useState(false);\n\n  let startTime = timeTextFromNowAndOffset(props.now, props.startOffset);\n  let endTime = timeTextFromNowAndOffset(props.now, props.endOffset);\n\n  const handleEnter = (e) => {\n    setHovered(true);\n  };\n  const handleLeave = (e) => {\n    setHovered(false);\n  };\n  const copyStartEnd = () => {\n    const toCopy = startTime + \":\" + endTime;\n    copy(toCopy);\n    props.handleCopySuccess(toCopy);\n  };\n\n  return (\n    <div className={\"card-grid \" + (hovered ? \"gap-0 bg-yellow-200 \" : \"\")}>\n      <div\n        onMouseEnter={handleEnter}\n        onMouseLeave={handleLeave}\n        onClick={copyStartEnd}\n        className={\"border hover:border-0 my-1 py-2 px-4 side-col text-sm cursor-pointer hover:bg-yellow-200 rounded-sm flex flex-row items-center justify-end font-medium py-2 px-4 \" +\n          (hovered ? \"\" : \"app-shadow-sm\")}\n      >\n        <CopyIcon hovered={hovered} />\n        <span className=\"ml-0.5\">start:end</span>\n      </div>\n      <CopyableTime\n        borderColor={startBorderColor}\n        alignLeft={true}\n        ts={startTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n      <CopyableTime\n        borderColor={endBorderColor}\n        ts={endTime}\n        hovered={hovered}\n        handleCopySuccess={props.handleCopySuccess}\n        handleCopyFail={props.handleCopyFail}\n      />\n    </div>\n  );\n};\n\nconst borderColorFromOffset = (offset) => {\n  if (offset < 0) {\n    return \"border-red-500\";\n  } else if (offset === 0) {\n    return \"border-gray-200\";\n  } else {\n    return \"border-green-500\";\n  }\n};\nconst timeTextFromNowAndOffset = (now, offset) => {\n  if (offset < 0) {\n    return \"bad input\";\n  } else {\n    return now - offset;\n  }\n};\n\nconst CopyableTime = (props) => {\n  const hovered = props.hovered;\n  const alignLeft = props.alignLeft;\n\n  const copyTs = () => {\n    console.log(props.ts);\n    copy(props.ts);\n    props.handleCopySuccess(props.ts);\n  };\n\n  return (\n    <div\n      onClick={copyTs}\n      className={\n        \"copyable-time group \" +\n        (hovered\n          ? \"bg-yellow-200 rounded-none border-yellow-200 \"\n          : props.borderColor + \" rounded-sm app-shadow-sm \") +\n        (hovered && alignLeft ? \"rounded-l-sm\" : \"rounded-r-sm\")\n      }\n    >\n      {!hovered ? <CopyIcon hovered={hovered} /> : \"\"}\n      <div className={\"w-full font-medium \" +\n        (hovered && alignLeft ? \"text-right \" : \"\") +\n        (hovered && !alignLeft ? \"-ml-10 \" : \"\")}>\n        {props.ts + (hovered && alignLeft ? \" : \" : \"\")}\n      </div>\n    </div>\n  );\n};\n\nexport default CopyableRow;\n","\nconst _MULTIPLIERS = {\n    's': 1,\n    'm': 60,\n    'h': 60 * 60,\n    'd': 24 * 60 * 60,\n}\n\n// Returns: \n// 0 if user probably still typing input / empty str\n// -1 if bad format\n// otherwise seconds to substract from current time\nconst timeStringToOffset = s => {\n    console.log(s);\n    if (s.length < 3) {\n        return 0;\n    }\n    const unit = s.charAt(s.length - 1);\n    if (unit in _MULTIPLIERS) {\n        const num = s.substring(1, s.length - 1);\n        return _MULTIPLIERS[unit] * num;\n    } else {\n        return -1;\n    }\n}\n\nexport {timeStringToOffset}\n","import React, { useState } from \"react\";\nimport clsx from 'clsx';\nimport CopyableRow from \"./components/CopyableRow\";\nimport { timeStringToOffset } from \"./helpers\";\n\n// const UNIT_OPTIONS = ['both', 'millis', 'seconds']\n// const REALTIME_OPTIONS = ['page load', 'realtime']\nconst QUICK_TIMESTAMPS = [\n  ['-0m', '-5m', '-10m', '-15m', '-30m'],\n  ['-1h', '-2h', '-3h', '-6h', '-12h', '-24h', '-36h'],\n  ['-1d', '-2d', '-4d', '-7d']]\n\nfunction App() {\n  // Time values\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n  const [startOffset, setStartOffset] = useState(0);\n  const [endOffset, setEndOffset] = useState(0);\n  const [lastFocusedWasStart, setLastFocusedWasStart] = useState(true);\n  const [ringInput, setRingInput] = useState(false);\n  const [flashQuickFillLabel, setFlashQuickFillLabel] = useState(true);\n  let [flashTimeouts, setFlashTimeouts] = useState([]);\n\n  // Options\n  // const [unitOption, setUnitOption] = useState(0)\n  // const [realtimeOption, setRealtimeOption] = useState(0)\n\n  // Animation\n  const [toast, setToast] = useState(\"hello\");\n  const [toastColor, setToastColor] = useState(\"white\");\n  const [toastFade, setToastFade] = useState(false);\n  const [toastMove, setToastMove] = useState(false);\n  let [timeouts, setTimeouts] = useState([]);\n\n  const [now] = useState(Math.round(Date.now() / 1000));\n  const nowDate = new Date(0);\n  nowDate.setUTCSeconds(now);\n\n  const handleQuickTimestamp = (ts) => {\n    if (lastFocusedWasStart) {\n      setStart(ts);\n      setStartOffset(timeStringToOffset(ts));\n    } else {\n      setEnd(ts);\n      setEndOffset(timeStringToOffset(ts));\n    }\n  }\n  const handleStartChange = (e) => {\n    setStart(e.target.value);\n    setStartOffset(timeStringToOffset(e.target.value));\n  };\n  const handleEndChange = (e) => {\n    setEnd(e.target.value);\n    setEndOffset(timeStringToOffset(e.target.value));\n  };\n  const handleCopySuccess = (s) => {\n    setToast(\"Copied \" + s);\n    setToastColor(\"bg-green-500\");\n    setToastFade(true);\n    setToastMove(false);\n\n    if (toast === \"hello\") {\n      setToastFade(false);\n      setToastMove(true);\n    } else {\n      setTimeout(() => {\n        setToastFade(false);\n        setToastMove(true);\n      }, 150);\n    }\n\n    timeouts.forEach((t) => {\n      clearTimeout(t);\n    });\n    timeouts = [];\n    timeouts.push(\n      setTimeout(() => {\n        setToastFade(true);\n        setToastMove(false);\n      }, 3000)\n    );\n    setTimeouts(timeouts);\n  };\n\n  const changeQuickFillLabel = (wasStart) => {\n    setLastFocusedWasStart(wasStart)\n    setFlashQuickFillLabel('bg-blue-200')\n    flashTimeouts.forEach((t) => {\n      clearTimeout(t);\n    });\n    flashTimeouts = []\n    flashTimeouts.push(setTimeout(() => setFlashQuickFillLabel('bg-transparent'), 1000))\n    setFlashTimeouts(flashTimeouts)\n  }\n\n  const handleCopyFail = (s) => {\n    setToast(\"Fail to copy \" + s);\n    setToastColor(\"bg-red-500\");\n  };\n  console.log(ringInput && lastFocusedWasStart)\n  console.log(ringInput && lastFocusedWasStart && 'test')\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div\n          className={\n            \"h-auto w-3/4 p-4 my-1 mx-auto rounded-md text-center text-xl border text-white \"\n            + toastColor + \" \" +\n            (toastFade ? \"opacity-0 \" : \"\") +\n            \"transition transform duration-300  \" +\n            (toastMove\n              ? \"translate-y-0 opacity-1 \"\n              : \"-translate-y-8 opacity-0\")\n          }\n        >\n          {toast}\n        </div>\n\n        {/* <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Show units: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {UNIT_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div>\n        <div className=\"vspace\">\n          <div className=\"inline-flex mr-1\">Use \"now\" time of: </div>\n          <div className=\"cursor-pointer inline-flex shadow-sm -space-x-px\">\n            {REALTIME_OPTIONS.map((optionName, i) => (\n              <a className={\"option-btn \" + (i === unitOption ? \"active\" : \"\")}>\n                {optionName}\n              </a>\n            ))}\n          </div>\n        </div> */}\n        <div className=\"card-container\">\n          <div className=\"mt-1 mb-2 text-center\">\n            <div className=\"mb-2\"><span className=\"text-3xl font-bold\">{now}</span> seconds as the \"now\" time</div>\n            <div className=\"text-sm text-gray-500\"><span className=\"font-semibold\">{nowDate.toLocaleString()} in local time</span></div>\n            <div className=\"text-sm text-gray-500\"><span className=\"font-semibold\">{nowDate.toUTCString()}</span></div>\n          </div>\n          <div className=\"card-grid mb-6\">\n            <div className=\"side-col\"></div>\n            <div className=\"double-main-col\">\n              <div className=\"textinput-label mb-1\">quick fill <span className={'transition-colors ' + flashQuickFillLabel}>{(lastFocusedWasStart ? \"start time\" : \"end time\")}:</span></div>\n              {QUICK_TIMESTAMPS.map((unit, rowIdx) =>\n                <div className=\"\">\n                  {unit.map(timestamp => (\n                    <div\n                      className={\"w-10 p-1 text-sm text-right cursor-pointer inline-block font-mono border-gray-300 hover:bg-blue-200 \" + (rowIdx === 1 ? \"\" : \"\")}\n                      onClick={(e) => handleQuickTimestamp(timestamp)}\n                      onMouseEnter={() => setRingInput(true)}\n                      onMouseLeave={() => setRingInput(false)}\n                      key={timestamp}>\n                      {timestamp}\n                    </div>\n                  ))}\n                </div>)}\n            </div>\n          </div>\n          <div className=\"card-grid mb-6\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col cursor-pointer\">\n              <label\n                htmlFor=\"start_time\"\n                className=\"textinput-label\"\n              >\n                Start time (ex: -1d, -4h)\n              </label>\n              <input\n                type=\"text\"\n                name=\"start_time\"\n                id=\"start_time\"\n                className={clsx((ringInput && lastFocusedWasStart && 'border-blue-400') || 'border-gray-300', 'textinput')}\n                onChange={handleStartChange}\n                onFocus={(e) => changeQuickFillLabel(true)}\n                value={start}\n              />\n            </div>\n            <div className=\"main-col cursor-pointer\">\n              <label\n                htmlFor=\"end_time\"\n                className=\"textinput-label\"\n              >\n                End time (click for quick fill)\n              </label>\n              <input\n                type=\"text\"\n                name=\"end_time\"\n                id=\"end_time\"\n                className={clsx((ringInput && !lastFocusedWasStart && 'border-blue-400') || 'border-gray-300', 'textinput')}\n                onChange={handleEndChange}\n                onFocus={(e) => changeQuickFillLabel(false)}\n                value={end}\n              />\n            </div>\n          </div>\n          <div className=\"card-grid mt-4 text-gray-400 text-sm font-medium\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col\">seconds</div>\n          </div>\n\n          <CopyableRow\n            now={now}\n            startOffset={startOffset}\n            endOffset={endOffset}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n          <div className=\"card-grid mt-4 text-gray-400 text-sm font-medium\">\n            <div className=\"side-col\"></div>\n            <div className=\"main-col\">millis</div>\n          </div>\n          <CopyableRow\n            now={now * 1000}\n            startOffset={startOffset * 1000}\n            endOffset={endOffset * 1000}\n            handleCopySuccess={handleCopySuccess}\n            handleCopyFail={handleCopyFail}\n          />\n        </div>\n        {/* <div className=\"text-lg font-medium leading-6 text-gray-900 mt-5\">\n          Previous timestamps\n        </div>\n        <div className=\"card-container\">\n          Feature coming soon\n        </div> */}\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}